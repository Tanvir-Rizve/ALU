module alu #(parameter OPCODE_WIDTH = 5, parameter DATA_WIDTH = 32) (clk,
rst_n, en, opcode, in_a, in_b, out);
input wire clk, rst_n, en;
input wire [OPCODE_WIDTH-1:0] opcode;
input wire [DATA_WIDTH-1:0] in_a, in_b;
output wire [2*DATA_WIDTH-1:0] out;
reg [2*DATA_WIDTH-1:0] out_reg;
always @(posedge clk) begin
if (!rst_n) begin
out_reg <= {(DATA_WIDTH){1'b0}};
end
else if (en) begin
case (opcode)
5'b00001: out_reg <= in_a + in_b;
5'b00010: out_reg <= in_a - in_b;
5'b00011: out_reg <= in_a * in_b;
5'b00100: out_reg <= in_a >> 1;
5'b00101: out_reg <= in_a << 1;
5'b00110: out_reg <= in_a & in_b;
5'b00111: out_reg <= in_a | in_b;
5'b01000: out_reg <= in_a ^ in_b;
5'b01001: out_reg <= in_a + 1'b1;
5'b01010: out_reg <= in_a - 1'b1;
default: out_reg <= out_reg;
endcase

end
else begin
out_reg <= out_reg;
end
end
assign out = out_reg;
endmodule