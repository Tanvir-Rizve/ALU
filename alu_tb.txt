module alu_tb();
parameter OPCODE_WIDTH = 5;
parameter DATA_WIDTH = 32;
logic clk, rst_n, en;
logic [OPCODE_WIDTH-1:0] opcode;
logic [DATA_WIDTH-1:0] in_a, in_b;
logic [2*DATA_WIDTH-1:0] out;
alu #(.OPCODE_WIDTH(OPCODE_WIDTH), .DATA_WIDTH(DATA_WIDTH)) dut
(

.clk(clk),
.rst_n(rst_n),
.en(en),
.opcode(opcode),
.in_a(in_a),
.in_b(in_b),
.out(out)
);
initial begin
$dumpvars;
$dumpfile("dump.vcd");
end
initial begin
clk = 0;
rst_n = 1;

en = 0;
opcode = 0;
in_a = 0;
in_b = 0;
end
initial forever #5 clk = ~clk;
initial begin
reset_event();
add_event();
repeat(1) @(posedge clk);

end
task reset_event();
repeat(1) @(posedge clk);
rst_n = 0;
repeat(1) @(posedge clk);
rst_n = 1;
repeat(1) @(posedge clk);
endtask
task add_event();
en = 1;
opcode = 5'b00001;
in_a = 32'h00000002;
in_b = 32'h00000003;
repeat(1) @(posedge clk);
$display("Out: %h", out);
endtask

endmodule